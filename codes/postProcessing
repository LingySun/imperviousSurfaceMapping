function getDemaskImgColNew(allImageCol,orderList){
  var allImageColModified = ee.ImageCollection([])
  
  for(var m=2;m<orderList.length;m++){
    var i = orderList[m]
    var urbanImg = allImageCol.filterMetadata('order','equals',i).first()
    var urbanImgBefore1 = allImageCol.filterMetadata('order','equals',orderList[m-1]).first()
    var urbanImgBefore2 = allImageCol.filterMetadata('order','equals',orderList[m-2]).first()
    
    var urbanImgDemask = ee.Image(ee.ImageCollection([urbanImg,urbanImgBefore1,urbanImgBefore2]).reduce(ee.Reducer.firstNonNull()).copyProperties(urbanImg))
    Map.addLayer(urbanImgDemask.selfMask(),{min:0,max:1,palette: 'blue'},'Demask_'+i,false)
    allImageColModified = allImageColModified.merge([urbanImgDemask])    
  }
  
  return allImageColModified
}

function getDefalseImgColNew(allImageCol,orderList){
  var allImageColModified = ee.ImageCollection([])
  for(var m=0;m<orderList.length-2;m++){
    var i = orderList[m]
    var urbanImg = allImageCol.filterMetadata('order','equals',i).first()
    var urbanImgAfter1 = allImageCol.filterMetadata('order','equals',orderList[m+1]).first()
    var urbanImgAfter2 = allImageCol.filterMetadata('order','equals',orderList[m+2]).first()    

    var urbanImgDeflase = urbanImg.where(urbanImg.multiply(urbanImgAfter1).multiply(urbanImgAfter2).eq(0),0).copyProperties(urbanImg)
    allImageColModified = allImageColModified.merge([urbanImgDeflase])
    
  }
  
  return allImageColModified
}

function getIncreaseImgColNew(allImageCol,orderList,region){
  var firstImg = allImageCol.filterMetadata('order','equals',orderList[0]).first()
  var allImageColModified = ee.ImageCollection([ee.Image(0).clip(region).where(firstImg,firstImg).copyProperties(firstImg)])
  for(var m = 1;m < orderList.length; m++){
    var i = orderList[m]
    var urbanImg = allImageCol.filterMetadata('order','equals',i).first()
    var urbanImgBefore = allImageColModified.filterMetadata('order','equals',orderList[m-1]).first()
    // var urbanImgInc = ee.Image(ee.Image(urbanImg.where(urbanImgBefore,urbanImgBefore)).copyProperties(urbanImg))
    var urbanImgInc = ee.Image(ee.Image(urbanImgBefore.where(urbanImg,urbanImg)).copyProperties(urbanImg))
    Map.addLayer(urbanImgInc,{min:0,max:1,palette: ['black','orange']},'inc_'+i,false)
    // Map.addLayer(urbanImgInc.selfMask(),{min:0,max:1,palette: 'orange'},'inc_'+i,false)
    allImageColModified = allImageColModified.merge([urbanImgInc])    
  }
  
  return allImageColModified
}

function getPropocessedImgColNew(allImageCol,orderList,region){
  var orderListLen = orderList.length
  var allImageColModifiedDemask = getDemaskImgColNew(allImageCol,orderList)
  var allImageColModifiedDefalse = getDefalseImgColNew(allImageColModifiedDemask,orderList.slice(2,orderListLen))
  var allImageColModifiedInc = getIncreaseImgColNew(allImageColModifiedDefalse,orderList.slice(2,orderListLen-2),region)
  
  return allImageColModifiedInc
}




//-------------------------------------define the data for post processing--------------------------
var orderList = [7,8,9,10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34] //the order list of exported time series IS mapping
var region = ee.FeatureCollection('users/sunly3456/Boundary/wuhan')
var classUrbanImgCol = ee.FeatureCollection('users/lemon11/urban/urbanClassRel230120/urbanClass230909').filterMetadata('cityName','equals','Wuhan')//the imageCollection list of exported time series IS mapping

//------------------------------------final time series IS mapping results-------------------------
var allImageColModifiedInc = getPropocessedImgColNew(classUrbanImgCol,orderList,region)
print(classUrbanImgCol)








