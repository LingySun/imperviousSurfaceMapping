//----------------------------------sentinel-2 img----------------------------------------
function maskS2clouds(image) {
  var qa = image.select('QA60');

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

  return image.updateMask(mask).divide(10000);
}

function getSen2Image(year,startM,endM,region){
  var dataset = ee.ImageCollection('COPERNICUS/S2')
  var yearStartDate = ee.Date(year+'-01-01')
  var startDate = yearStartDate.advance(startM-1,'month')
  var endDate = yearStartDate.advance(endM,'month')
  var imageCol = dataset.filterDate(startDate,endDate)
                        .filterBounds(region)
                        .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 30))
                        .map(maskS2clouds)
                        .map(function(img){
                          var calImg = img.select(['B2', 'B3', 'B4', 'B8', 'B11', 'B12'])
                                          .rename(['blue', 'green', 'red', 'nir', 'swir1', 'swir2'])
                                          
                          var green = calImg.select("green");
                          var red = calImg.select("red");
                          var nir = calImg.select("nir");
                          var swir1 = calImg.select("swir1");
                          
                          var ndvi = nir.subtract(red).divide(nir.add(red)).rename("NDVI"); 
                          var mndwi = green.subtract(swir1).divide(green.add(swir1)).rename("NDWI");
                          var ndbi = swir1.subtract(nir).divide(swir1.add(nir)).rename("NDBI");
                          return calImg.addBands(ndvi).addBands(mndwi).addBands(ndbi)
                        })

  var sen2Img = imageCol.median().clip(region)
  return sen2Img
}


//----------------------------------sentinel-1 data---------------------------------------
function getSen1SeriesData(year,startM,endM,region){
  var startT = ee.Date(year+'-1-1').advance(startM-1,'month')
  var endT = ee.Date(year+'-1-1').advance(endM,'month')
  // Remove clouds, add variables and filter to the area of interest.
  var dataSeries =  ee.ImageCollection('COPERNICUS/S1_GRD')
    .filterBounds(region)
    .filterDate(startT,endT)
    .map(function(image) {
          var edge = image.lt(-30.0);
          var maskedImage = image.mask().and(edge.not());
          return image.updateMask(maskedImage);
    })
    .map(function(image){return image.select(['VV','VH'])})
  var reducer = ee.Reducer.median().combine({
      reducer2: ee.Reducer.stdDev(),
      sharedInputs: true
    })
  
  var reduceImg = dataSeries.reduce({
    reducer:reducer,
  })
  return reduceImg
}


//--------------------------------------urban dataset----------------------------------------------
var urbanDataset = ee.Image("Tsinghua/FROM-GLC/GAIA/v10");
var visualization = {
  bands: ['change_year_index'],
  min: 0.0,
  max: 34.0,
  palette: [
    "014352","1A492C","071EC4","B5CA36","729EAC","8EA5DE",
    "818991","62A3C3","CCF4FE","74F0B9","32BC55","C72144",
    "56613B","C14683","C31C25","5F6253","11BF85","A61B26",
    "99FBC5","188AAA","C2D7F1","B7D9D8","856F96","109C6B",
    "2DE3F4","9A777D","151796","C033D8","510037","640C21",
    "31A191","223AB0","B692AC","2DE3F4",
  ]
};


var urbanSampleYear = 2018
var oldUrban = urbanDataset.gte(2018-urbanSampleYear+1)
Map.addLayer(oldUrban, {min:0,max:1}, "urban region in "+urbanSampleYear,false);



//------------------------- Define Change detection city regions---------------------------------
var region = ee.FeatureCollection('users/sunly3456/Boundary/wuhan')
var cityName = 'Wuhan'
//--------------------------Define the CCDC results in study region-----------------------------
var changeProp = ee.Image('users/TomGEE/urban/CCDCrel/CCDC230730/Wuhan')
//--------------------------Define the mapping time range-----------------------------
var sYear = 2022
var eYear = 2022





//--------------------------------sample urban points------------------------------------
var urbanSampleImgOrg = ee.Image(0).where(oldUrban,oldUrban).rename('isUrban').clip(region)
var kernel = ee.Kernel.square({radius: 2});
var urbanSampleImg = urbanSampleImgOrg
            .focal_min({kernel: kernel, iterations: 1 ,units:'pixels'})
            .selfMask()

//----------------------------sample other land cover types points------------------------------
function sampleImgPts(sampleImg,sampleNum,sampleReg,sampletype,changePropMaskImg,radiusNum){
  var samplePts = sampleImg.select(sampletype)
                           .focal_min({kernel: ee.Kernel.square({radius: radiusNum}), iterations: 1 ,units:'pixels'})
                           .multiply(changePropMaskImg)
                           .selfMask()
                           .sample({
                             region:sampleReg, 
                             scale:30,
                             numPixels:sampleNum, 
                             seed:1, 
                             dropNulls:true, 
                             tileScale:1, 
                             geometries:true,
                           })  
  // Map.addLayer(samplePts,{color:'#6cff89'},'samplePts '+sampletype,false)
  print('samplePts size '+sampletype,samplePts.size())
  return ee.FeatureCollection(samplePts)
}

var LCdata = ee.ImageCollection('users/wangyue/Gong2017Glc30');
var forest_data = ee.ImageCollection(LCdata)
  .qualityMosaic("b1")
  .expression("b(0)==2?1:0")
  .rename("forest");
var crop_data = ee.ImageCollection(LCdata).qualityMosaic("b1").expression("b(0)==1").rename("crop");
var grass_data = ee.ImageCollection(LCdata).qualityMosaic("b1").expression("b(0)==3").rename("grass");
var shrub_data = ee.ImageCollection(LCdata).qualityMosaic("b1").expression("b(0)==4").rename("shrub");
var water_data = ee.ImageCollection(LCdata).qualityMosaic("b1").expression("b(0)==6").rename("water");
var bareland_data = ee.ImageCollection(LCdata).qualityMosaic("b1").expression("b(0)==9").rename("bareland");
var wetland_data = ee.ImageCollection(LCdata).qualityMosaic("b1").expression("b(0)==5").rename("wetland");


//-----------------------if there are not LCdata data in some region, Globeland 30 can be used----------------------- 
// ------------------------------------------Globeland 30 data-----------------------------------------
// var LCdata = ee.ImageCollection('users/sunly3456/GLC2020');
// var forest_data = ee.ImageCollection(LCdata).qualityMosaic("b1").expression("b(0)==20").rename("forest");
// var crop_data = ee.ImageCollection(LCdata).qualityMosaic("b1").expression("b(0)==10").rename("crop");
// var grass_data = ee.ImageCollection(LCdata).qualityMosaic("b1").expression("b(0)==30").rename("grass");
// var shrub_data = ee.ImageCollection(LCdata).qualityMosaic("b1").expression("b(0)==40").rename("shrub");
// var water_data = ee.ImageCollection(LCdata).qualityMosaic("b1").expression("b(0)==60").rename("water");
// var bareland_data = ee.ImageCollection(LCdata).qualityMosaic("b1").expression("b(0)==90").rename("bareland");
// var wetland_data = ee.ImageCollection(LCdata).qualityMosaic("b1").expression("b(0)==50").rename("wetland");




var sampleImg = forest_data.addBands(crop_data).addBands(grass_data).addBands(shrub_data).addBands(water_data).addBands(bareland_data).addBands(wetland_data)
Map.addLayer(sampleImg,{},'sampleImg',false)


//-----------Define the sample number of each land cover type, needs to be adjusted several times to the appropriate number of samples----------------
var urbanSapNumber = 15000
var forestSapNumber = 16000
var cropSapNumber = 2000
var grassSapNumber = 250000
var shrubSapNumber = 100000
var waterSapNumber = 3600
var barelandSapNumber = 100000
var wetlandSapNumber = 500000


var urbanPts = urbanSampleImg.selfMask()
                       .sample({
                         region:region, 
                         scale:30, 
                         numPixels:urbanSapNumber, 
                         seed:1, 
                         dropNulls:true, 
                         tileScale:1, 
                         geometries:true,
                       })
print(urbanPts.size())
Map.addLayer(urbanPts,{},'urbanPts',false)

Map.addLayer(changeProp,{min:0,max:1},'changeProb',false)
var changePropMaskImg = changeProp.lte(0.01)
var radiusNum = 2
var forestSamples =  sampleImgPts(sampleImg,forestSapNumber,region,'forest',changePropMaskImg,radiusNum)
var cropSamples =  sampleImgPts(sampleImg,cropSapNumber,region,'crop',changePropMaskImg,radiusNum)
var grassSamples =  sampleImgPts(sampleImg,grassSapNumber,region,'grass',changePropMaskImg,radiusNum)
var shrubSamples =  sampleImgPts(sampleImg,shrubSapNumber,region,'shrub',changePropMaskImg,radiusNum)
var waterSamples =  sampleImgPts(sampleImg,waterSapNumber,region,'water',changePropMaskImg,radiusNum)
var barelandSamples =  sampleImgPts(sampleImg,barelandSapNumber,region,'bareland',changePropMaskImg,radiusNum)
var wetlandSamples =  sampleImgPts(sampleImg,wetlandSapNumber,region,'wetland',changePropMaskImg,radiusNum)
Map.centerObject(region, 9)


//------------------------get training samples-------------------------------
function setUrban(fea){
  return fea.set('isUrban',1)
}
function setNonUrban(fea){
  return fea.set('isUrban',0)
}

var allSampleTrainSample = urbanPts.map(setUrban)
                .merge(forestSamples.merge(cropSamples).merge(waterSamples)
                        .merge(grassSamples).merge(shrubSamples).merge(barelandSamples).merge(wetlandSamples)
                        .map(setNonUrban))


//---------------------------------classification----------------------------
function RFclassWithoutSplit(featureImageTrain,featureImageClass,featureList,allTrainSample,allTestSample,classPropertyName){
  var TrainSample = featureImageTrain.sampleRegions({
    collection:allTrainSample,
    scale:10,
    geometries:true,
    tileScale:1,
  })
  var validSample = featureImageTrain.sampleRegions({
    collection:allTestSample,
    scale:10,
    geometries:true,
    tileScale:1,
  })
  
  var classifier = ee.Classifier.smileRandomForest({numberOfTrees:100,seed:10}) 
                    .train(TrainSample, classPropertyName, featureList);

  var validated = validSample.classify(classifier)
  var testAcc = validated.errorMatrix(classPropertyName,'classification')
  print('Validation error matrix:',testAcc)
  print('Validation OA:',testAcc.accuracy())
  print('kappa:',testAcc.kappa())
  print('userAcc:',testAcc.consumersAccuracy().project([1]).get([1]))
  print('proAcc:',testAcc.producersAccuracy().get([1,0]))
  
  var predImage = featureImageClass.classify(classifier).int8(); 
  return predImage
  
}

//----------------------------------time series classification------------------------
var Sen2rgbVis = {
  min: 0.0,
  max: 0.3,
  bands: ['nir', 'red', 'green'],
};

var elevation = ee.Image('NASA/NASADEM_HGT/001').select('elevation');
var slope = ee.Terrain.slope(elevation).rename('slope');

var demList = ee.List(['elevation','slope'])
var sarList = ee.List(['VV_median','VV_stdDev','VH_median','VH_stdDev'])
var otherList = ee.List(['ntl'])

var allTrainSample = allSampleTrainSample
var allTestSample = allTrainSample
var classPropertyName = 'isUrban'


var specList = ee.List(['blue', 'green', 'red', 'nir', 'swir1', 'swir2',
                        'NDVI','NDWI','NDBI'
                        ])
var featureList = specList
                .cat(demList)
                .cat(sarList)
var scaleNum = 10

for(var year = sYear;year<=eYear;year++){
  for(var s = 1;s<=4;s++){
    var order = (year-2015)*4+s
    var startM = (s-1)*3+1
    var endM = s*3
    var sen2Img = getSen2Image(year,startM,endM,region)
    Map.addLayer(sen2Img, Sen2rgbVis, 'sen2Img-'+year+'-'+s,false); 
    var sen1Img = getSen1SeriesData(year,startM,endM,region)
    var specImage = sen2Img
    
    var featureImageTrain = specImage
                      .addBands(elevation).addBands(slope)
                      .addBands(sen1Img)
                      .select(featureList)
    var featureImageClass = featureImageTrain.select(featureList)
    
    var UrbanClass = ee.Image(RFclassWithoutSplit(featureImageTrain,featureImageClass,featureList,allTrainSample,allTestSample,classPropertyName)
                        .set('year',year).set('season',s).set('order',order).set('cityName',cityName).copyProperties(region.first()))
    Map.addLayer(UrbanClass,{min:0,max:1},'UrbanClass-'+year+'-'+s,false)
    
    var exportName = cityName+'_'+year+'_'+s
    Export.image.toAsset({
      image:UrbanClass, 
      description:exportName, 
      assetId:'users/lemon11/urban/urbanClassRel230120/'+exportName, 
      region:region, 
      scale:scaleNum, 
      maxPixels:1e13, 
    })
  }
}
